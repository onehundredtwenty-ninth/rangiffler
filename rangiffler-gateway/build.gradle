plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'com.google.cloud.tools.jib' version '3.3.2'
}

group = 'com.onehundredtwentyninth'
version = '1.1.6'

dependencies {
    implementation project(':rangiffler-grpc-common')
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation('org.springframework.boot:spring-boot-starter-web-services') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    implementation "com.tailrocks.graphql:graphql-datetime-spring-boot-starter:${project.ext.springGraphqlDateTimeVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server:${project.ext.oauth2ResourceServerVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation "net.devh:grpc-client-spring-boot-starter:${project.ext.springGrpcVersion}"
    implementation "org.springframework.cloud:spring-cloud-starter-vault-config:${project.ext.springVaultVersion}"
    implementation 'org.springframework:spring-webflux'
    implementation 'io.projectreactor.netty:reactor-netty'
    implementation 'org.springframework.data:spring-data-commons:3.2.4'
    annotationProcessor "org.projectlombok:lombok:${project.ext.lombokVersion}"
    compileOnly "org.projectlombok:lombok:${project.ext.lombokVersion}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

jib {
    container {
        ports = ['8080']
        jvmFlags = ["-Dspring.profiles.active=${System.env.PROFILE}"]
        environment = ['VAULT_TOKEN': "${System.env.VAULT_TOKEN}".toString()]
        creationTime = 'USE_CURRENT_TIMESTAMP'
    }
    from {
        image = "${project.ext.dockerImage}"
        platforms {
            platform {
                architecture = "${project.ext.dockerArch}"
                os = 'linux'
            }
        }
    }
    to {
        image = "${project.ext.dockerHubName}/${project.name}-${System.env.PROFILE}"
        tags = ['latest', "${project.version}"]
    }
}

tasks.named('bootJar') {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.register('printVersion') {
    doLast {
        println project.version
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
