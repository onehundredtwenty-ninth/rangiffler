buildscript {
    ext {
        protobufVersion = '3.24.3'
        grpcVersion = '1.58.0'
        junitVersion = '5.10.0'
        allureVersion = '2.24.0'
        selenideVersion = '6.18.0'
        logbackVersion = '1.4.11'
        slf4jVersion = '2.0.9'
        springJdbcVersion = '6.0.12'
        springCryptoVersion = '6.1.0'
        p6spyVersion = '3.9.1'
        kafkaClientsVersion = '3.5.1'
    }
}

plugins {
    id 'java'
    id 'io.qameta.allure' version '2.11.2'
    id 'io.qameta.allure-adapter' version '2.11.2'
}

group = 'com.onehundredtwentyninth'
version = '1.1.1'

allure {
    version.set("${allureVersion}")
    adapter {
        aspectjVersion.set("1.9.21")
        autoconfigure.set(true)
        aspectjWeaver.set(true)
    }
}

dependencies {
    testImplementation "org.springframework:spring-jdbc:${springJdbcVersion}"
    testImplementation "ch.qos.logback:logback-classic:${logbackVersion}"
    testImplementation "org.slf4j:slf4j-api:${slf4jVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    testImplementation 'io.rest-assured:rest-assured:5.4.0'
    testImplementation "org.postgresql:postgresql:${project.ext.postgresDriverVersion}"
    testImplementation "p6spy:p6spy:${p6spyVersion}"
    testImplementation "org.springframework.security:spring-security-crypto:${springCryptoVersion}"
    testImplementation "io.qameta.allure:allure-attachments:${allureVersion}"
    testImplementation("io.qameta.allure:allure-junit5:${allureVersion}") {
        exclude group: "org.junit.jupiter"
    }
    testImplementation("io.qameta.allure:allure-selenide:${allureVersion}") {
        exclude group: 'com.codeborne'
    }
    testImplementation "io.qameta.allure:allure-grpc:${allureVersion}"
    testImplementation "com.codeborne:selenide:${selenideVersion}"
    testImplementation 'com.github.javafaker:javafaker:1.0.2'
    testImplementation 'commons-io:commons-io:2.11.0'
    testImplementation 'com.github.vertical-blank:sql-formatter:2.0.3'
    testImplementation "io.grpc:grpc-protobuf:${grpcVersion}"
    testImplementation "io.grpc:grpc-stub:${grpcVersion}"
    testImplementation "io.grpc:grpc-netty:${grpcVersion}"
    testImplementation "com.google.protobuf:protobuf-java:${protobufVersion}"
    testImplementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
    testImplementation project(':rangiffler-grpc-common')
    compileOnly 'jakarta.annotation:jakarta.annotation-api:1.3.5' // Java 9+ compatibility - Do NOT update to 2.0.0
    testImplementation "org.apache.kafka:kafka-clients:${kafkaClientsVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${project.ext.lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${project.ext.lombokVersion}"
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.0'
    implementation 'io.qameta.allure:allure-rest-assured:2.27.0'
    testImplementation 'org.assertj:assertj-core:3.25.3'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.register('printVersion') {
    doLast {
        println project.version
    }
}

test {
    options {
        systemProperties(System.getProperties())
    }
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
    useJUnitPlatform()
}
